import discord
from discord.ext import commands
import asyncio

class HelpView(discord.ui.View):
    def __init__(self, help_embeds):
        super().__init__(timeout=180)
        self.help_embeds = help_embeds
        self.current_page = 0

    @discord.ui.button(label="‚óÄÔ∏è", style=discord.ButtonStyle.primary)
    async def previous_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.current_page = (self.current_page - 1) % len(self.help_embeds)
        await interaction.response.edit_message(embed=self.help_embeds[self.current_page], view=self)

    @discord.ui.button(label="‚ñ∂Ô∏è", style=discord.ButtonStyle.primary)
    async def next_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.current_page = (self.current_page + 1) % len(self.help_embeds)
        await interaction.response.edit_message(embed=self.help_embeds[self.current_page], view=self)

class HelpCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def create_help_embeds(self):
        help_embeds = []

        # Page 1: Syst√®me de Tickets
        embed_tickets = discord.Embed(
            title="üé´ Syst√®me de Tickets",
            description="Commandes pour g√©rer le syst√®me de tickets",
            color=discord.Color.blue()
        )
        embed_tickets.add_field(
            name="Configuration des Tickets",
            value="""
`?ticket_setup #salon` : Configure le syst√®me de tickets dans un salon
‚Ä¢ Configure les messages de bienvenue pour chaque cat√©gorie
‚Ä¢ D√©finit le r√¥le support et le salon des logs
‚Ä¢ Cr√©e les cat√©gories Discord pour chaque type de ticket

`?ticket_list` : Affiche toutes les configurations de tickets
‚Ä¢ Liste les panneaux de tickets actifs
‚Ä¢ Montre les statistiques par cat√©gorie
‚Ä¢ Affiche les messages configur√©s

`?ticket_edit #salon` : Modifie une configuration existante
‚Ä¢ Permet de modifier chaque cat√©gorie individuellement
‚Ä¢ Modification des messages de bienvenue
‚Ä¢ Changement du r√¥le support
‚Ä¢ Modification des cat√©gories Discord

`?ticket_delete #salon` : Supprime une configuration
‚Ä¢ Supprime les cat√©gories Discord associ√©es
‚Ä¢ Retire le panneau de tickets

`?ticket_logs [#salon]` : G√®re le salon des logs des tickets
‚Ä¢ Sans argument : affiche le salon actuel
‚Ä¢ Avec #salon : d√©finit un nouveau salon
‚Ä¢ Bouton pour modifier rapidement
""",
            inline=False
        )
        embed_tickets.add_field(
            name="Gestion des Tickets",
            value="""
`?close` : Ferme le ticket actuel
‚Ä¢ Cr√©e une transcription compl√®te
‚Ä¢ Envoie une copie au cr√©ateur du ticket
‚Ä¢ Envoie les logs dans le salon configur√©
‚Ä¢ Supprime le salon du ticket

`?set_priority <priorit√©>` : D√©finit la priorit√© d'un ticket
‚Ä¢ Options : basse, moyenne, haute, urgente
‚Ä¢ Change l'emoji du ticket
‚Ä¢ Met √† jour les statistiques
‚Ä¢ Modifie la couleur des messages

`?tickets_priority` : Liste les tickets par priorit√©
‚Ä¢ Affiche les tickets actifs par niveau de priorit√©
‚Ä¢ Montre les statistiques globales
‚Ä¢ Permet un suivi des tickets urgents
""",
            inline=False
        )
        help_embeds.append(embed_tickets)

        # Page 2: Mod√©ration
        embed_moderation = discord.Embed(
            title="üõ°Ô∏è Commandes de Mod√©ration",
            description="Commandes pour la mod√©ration du serveur",
            color=discord.Color.red()
        )
        embed_moderation.add_field(
            name="Gestion des Messages",
            value="""
`?clear <nombre>` : Supprime un nombre sp√©cifi√© de messages
`?add_banned_word <mot>` : Ajoute un mot √† la liste des mots interdits
`?remove_banned_word <mot>` : Retire un mot de la liste des mots interdits
`?list_banned_words` : Affiche la liste des mots interdits
`?list_banned_files` : Affiche la liste des extensions de fichiers interdites
""",
            inline=False
        )
        embed_moderation.add_field(
            name="Gestion des Avertissements",
            value="""
`?warn <@membre> <raison>` : Donne un avertissement √† un membre
`?warnings <@membre>` : Affiche les avertissements d'un membre
`?clearwarns <@membre>` : Supprime tous les avertissements d'un membre
""",
            inline=False
        )
        help_embeds.append(embed_moderation)

        # Page 3: Configuration
        embed_config = discord.Embed(
            title="‚öôÔ∏è Configuration",
            description="Commandes de configuration du bot",
            color=discord.Color.green()
        )
        embed_config.add_field(
            name="Configuration G√©n√©rale",
            value="""
`?set_log_channel #salon` : D√©finit le salon des logs
`?set_welcome_channel #salon` : D√©finit le salon de bienvenue
`?set_welcome_message <message>` : Configure le message de bienvenue
`?set_goodbye_message <message>` : Configure le message d'au revoir
`?show_welcome_config` : Affiche la configuration actuelle
""",
            inline=False
        )
        embed_config.add_field(
            name="Configuration des R√¥les",
            value="""
`?set_owner @utilisateur` : D√©finit le propri√©taire du bot
`?set_admin_role @role` : D√©finit le r√¥le administrateur
`?set_mod_role @role` : D√©finit le r√¥le mod√©rateur
`?set_status <texte>` : Change le statut du bot
""",
            inline=False
        )
        help_embeds.append(embed_config)

        # Page 4: Messages et R√©actions
        embed_reactions = discord.Embed(
            title="üí´ Messages et R√©actions",
            description="Configuration des messages et r√©actions automatiques",
            color=discord.Color.purple()
        )
        embed_reactions.add_field(
            name="R√©actions Automatiques",
            value="""
`?add_auto_reaction #salon emoji` : Ajoute une r√©action automatique
`?remove_auto_reaction #salon emoji` : Retire une r√©action automatique
`?list_auto_reactions` : Affiche la liste des r√©actions automatiques
`?react_history #salon <nombre>` : Ajoute les r√©actions aux anciens messages
""",
            inline=False
        )
        embed_reactions.add_field(
            name="Param√®tres des R√©actions",
            value="""
`?set_reaction_chance <pourcentage>` : D√©finit la probabilit√© de r√©action
`?toggle_reactions #salon` : Active/d√©sactive les r√©actions dans un salon
""",
            inline=False
        )
        help_embeds.append(embed_reactions)

        # Page 5: Statistiques et Info
        embed_stats = discord.Embed(
            title="üìä Statistiques et Informations",
            description="Commandes pour voir les statistiques et informations",
            color=discord.Color.gold()
        )
        embed_stats.add_field(
            name="Statistiques",
            value="""
`?stats` : Affiche les statistiques du serveur
‚Ä¢ Nombre de membres
‚Ä¢ Nombre de tickets cr√©√©s
‚Ä¢ Statistiques de mod√©ration
‚Ä¢ Statistiques des tickets par priorit√©
‚Ä¢ Statistiques des tickets par cat√©gorie

`?info` : Affiche les informations du bot
‚Ä¢ Version du bot
‚Ä¢ Temps de fonctionnement
‚Ä¢ Latence
‚Ä¢ Nombre de commandes disponibles

`?setup_stats` : Configure les compteurs de statistiques
‚Ä¢ Membres totaux
‚Ä¢ Membres en ligne
‚Ä¢ Nombre de salons
‚Ä¢ Nombre de tickets actifs
""",
            inline=False
        )
        help_embeds.append(embed_stats)

        # Ajouter le num√©ro de page √† chaque embed
        for i, embed in enumerate(help_embeds):
            embed.set_footer(text=f"Page {i+1}/{len(help_embeds)}")

        return help_embeds

    @commands.command(name="help")
    async def help(self, ctx):
        """Affiche l'aide du bot"""
        help_embeds = self.create_help_embeds()
        view = HelpView(help_embeds)
        await ctx.send(embed=help_embeds[0], view=view)

async def setup(bot):
    await bot.add_cog(HelpCog(bot)) 